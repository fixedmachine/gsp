{"version":3,"sources":["gsp.js"],"names":["$","window","gsp","_gs","_currentMaterialId","_gsScriptUrl","_loadGS","options","dataType","cache","url","success","_onLoadGSSuccess","error","_onLoadGSError","_log","ajax","retry","func","gemiusStream","_applyConfigConstants","setTimeout","jqXHR","textStatus","errorThrown","gSmConfig","extend","configConst","_sendGSEvent","eventType","sec","streamInitialized","event","config","playerId","materialIdentifier","type","funcName","msg","logFuncName","rest","Array","prototype","slice","call","arguments","debug","console","apply","this","concat","defaultConfigConst","defaultConfig","IDENTIFIER","HITCOLLECTOR","Math","round","random","totalTime","treeId","additionalPackage","customPackage","name","value","checkConfig","repair","toString","playersArray","length","init","setTotalTime","duration","undefined","newStream","materialId","closeStream","onPlay","onPause","onStop","onBuffering","onSeekingStarted","onComplete","jQuery"],"mappings":"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","file":"gsp.min.js","sourcesContent":["/**\r\n * Gemius Stream integration for projekktor player\r\n * @author Radosław Włodkowski\r\n * @version 2.5.0\r\n * @date 2017-03-28\r\n * @license: MIT\r\n */\r\n\r\n(function($) {\r\n\r\n    if (window.gsp) {\r\n        return;\r\n    }\r\n\r\n    // private\r\n    \r\n    var _gs,\r\n        _currentMaterialId = '',\r\n        _gsScriptUrl = \"//pro.hit.gemius.pl/gstream.js\",\r\n        // check if Gemius Stream script is already loaded \r\n        _checkGS = function() {\r\n            if (window.gemiusStream) {\r\n                _gs = window.gemiusStream;\r\n            }\r\n            else {\r\n                _loadGS();\r\n            }\r\n        },\r\n        _loadGS = function() {\r\n            var options = {\r\n                dataType: \"script\",\r\n                cache: true,\r\n                url: _gsScriptUrl,\r\n                success: _onLoadGSSuccess,\r\n                error: _onLoadGSError\r\n            };\r\n            _log(\"log\", \"_loadGS\", \"gemiusStream library loading from: \" + _gsScriptUrl)\r\n            return $.ajax(options);\r\n        },\r\n        _onLoadGSSuccess = function() {\r\n            var retry = 1,\r\n                maxRetry = 4,\r\n                timeoutMs = 200,\r\n                func = function(){\r\n                    if (window.gemiusStream) {\r\n                        _gs = window.gemiusStream;\r\n                        _log(\"log\", \"_onLoadGSSuccess\", \"gemiusStream loaded.\")\r\n                        \r\n                        _applyConfigConstants();\r\n                    }\r\n                    else if(retry<=maxRetry) {\r\n                        window.setTimeout(func, timeoutMs);\r\n                        _log(\"log\", \"_onLoadGSSuccess\", \"Waiting for gemiusStream to appear in global scope. \" + retry + \" retry out of \" + maxRetry);\r\n                        retry++;\r\n                    }\r\n                    else {\r\n                        _log(\"error\", \"_onLoadGSSuccess\", \"gemiusStream can't be found in global scope.\");\r\n                    }\r\n                };\r\n                func();\r\n        },\r\n        _onLoadGSError = function(jqXHR, textStatus, errorThrown) {\r\n            _log(\"error\", \"_onLoadGSError\", \"Error loading Gemius Stream script. Error: \" + textStatus + \" | \" + errorThrown);\r\n        },\r\n        _applyConfigConstants = function(){\r\n            if(window.gSmConfig){\r\n                window.gSmConfig = $.extend({}, window.gSmConfig, gsp.configConst);\r\n                _log(\"log\", \"_applyConfigConstants\", \"gSmConfig config applied: \", window.gSmConfig);\r\n            }\r\n            else {\r\n                _log(\"warn\", \"_applyConfigConstants\", \"gSmConfig can't be found in global scope.\");\r\n            }\r\n        },\r\n        _getDurationSection = function(totalTime) {\r\n            var duration = '';\r\n\r\n            (totalTime === undefined || totalTime === \"live\") ? duration = 'live' : null;\r\n            (totalTime >= 0 && totalTime <= 599) ? duration = '0-9:59' : null;\r\n            (totalTime >= 600 && totalTime <= 1199) ? duration = '10:00-19:59' : null;\r\n            (totalTime >= 1200 && totalTime <= 1799) ? duration = '20:00-29:59' : null;\r\n            (totalTime >= 1800 && totalTime <= 2399) ? duration = '30:00-39:59' : null;\r\n            (totalTime >= 2400) ? duration = '40:00+' : null;\r\n\r\n            return duration;\r\n        },\r\n        _sendGSEvent = function(eventType, sec) {\r\n            if (gsp.streamInitialized()) { // check if there are any open streams for current player before sending any event\r\n                _gs.event(gsp.config.playerId, gsp.config.materialIdentifier, sec, eventType);\r\n                _log(\"log\", \"_sendGSEvent\", eventType + \" event sent in \" + sec + \" second of the stream for player [id: \" + gsp.config.playerId + \"]\");\r\n            }\r\n            else {\r\n                _log(\"log\", \"_sendGSEvent\", eventType + \" event noticed but there are no active streams for current player [id: \" + gsp.config.playerId + \"]\");\r\n            }\r\n        },\r\n        _log = function(type, funcName, msg){\r\n            var logHeader = \"[gsp]->\",\r\n                logFuncName = \"[\" + funcName + \"]\",\r\n                rest = Array.prototype.slice.call(arguments, 3);\r\n                \r\n        \r\n            if(gsp.debug && window.console){\r\n                switch(type){\r\n                    case \"log\":\r\n                    case \"warn\":\r\n                    case \"error\":\r\n                        break;\r\n                    default:\r\n                         type = \"log\";\r\n                }\r\n                window.console[type].apply(this, [logHeader+logFuncName+\" \"+msg].concat(rest));\r\n            }\r\n        },\r\n        // public api\r\n        gsp = {\r\n            defaultConfigConst: {\r\n                /*MAX_CRITERIONS: 10,\r\n                VERSION: 6,\r\n                MAX_CRITERION_LENGTH: 16,\r\n                MAX_CATEGORY_LENGTH: 64,\r\n                MAX_TREE_ID_LENGTH: 64,\r\n                MAX_ID_LENGTH: 64,\r\n                VIEW_ID_LENGTH: 16,\r\n                ID_RES: [\"|\", \"*\", \"\\n\", \"\\t\", \"\\r\"],\r\n                CRITERION_RES: [\"|\", \"*\", \"\\n\", \"\\t\", \"\\r\", \";\", \"=\", \"/\", \"#\"],\r\n                CATEGORY_RES: [\"|\", \"*\", \"\\n\", \"\\t\", \"\\r\", \";\", \"=\", \"/\", \"#\"],\r\n                TIMEOUT: 300,\r\n                MAX_LOG_LENGTH: 990,\r\n                ENCODING: \"utf-8\"*/\r\n            },\r\n            defaultConfig: {\r\n                IDENTIFIER: \"\",\r\n                HITCOLLECTOR: \"\",\r\n                playerId: 'player_' + Math.round(Math.random() * 1000000),\r\n                materialIdentifier: \"\", // ! String !\r\n                totalTime: 0,\r\n                treeId: [], // context.parents\r\n                additionalPackage: [],\r\n                customPackage: [\r\n                    {name: \"Title\", value: \"\"}, \r\n                    {name: \"SeriesTitle\", value: \"\"},\r\n                    {name: \"Vortal\", value: \"\"},\r\n                    {name: \"Subcategory1\", value: \"\"},\r\n                    {name: \"Duration\", value: \"live\"},\r\n                    {name: \"Type\", value: \"stream\"} \r\n                ]\r\n            },\r\n            config: {},\r\n            configConst: {},\r\n            debug: false,\r\n            checkConfig: function(repair) {\r\n                if (typeof (this.config.materialIdentifier) !== \"string\") {\r\n                    if (repair) {\r\n                        this.config.materialIdentifier = this.config.materialIdentifier.toString();\r\n                    }\r\n                    _log(\"log\", \"checkConfig\", \"config.materialIdentifier was not a string\");\r\n                }\r\n            },\r\n            streamInitialized: function() {\r\n                return (!!_gs.playersArray.length);\r\n            },\r\n            init: function(options, configConst) {\r\n                _checkGS();\r\n                this.config = $.extend({}, this.defaultConfig, this.config, options);\r\n                this.configConst = $.extend({}, this.defaultConfigConst, this.configConst, configConst);\r\n                this.checkConfig(true);\r\n                _log(\"log\", \"init\", \"gsp successfully initialized with config: \", this.config, this.configConst);\r\n            },\r\n            setTotalTime: function(totalTime) {\r\n                gsp.config.totalTime = totalTime;\r\n                gsp.config.customPackage[4] = {name: \"Duration\", value: _getDurationSection(totalTime)};\r\n            },\r\n            newStream: function(materialId) {\r\n                if (_currentMaterialId !== materialId) {\r\n                    _gs.newStream(\r\n                            this.config.playerId,\r\n                            this.config.materialIdentifier,\r\n                            this.config.totalTime,\r\n                            this.config.customPackage,\r\n                            this.config.additionalPackage,\r\n                            this.config.IDENTIFIER,\r\n                            this.config.HITCOLLECTOR,\r\n                            this.config.treeId\r\n                            );\r\n                    _log(\"log\", \"newStream\", \"new stream opened for player [id: \" + gsp.config.playerId + \"] with config: \", this.config);\r\n                    _currentMaterialId = materialId;\r\n                }\r\n            },\r\n            closeStream: function(sec) {\r\n                _gs.closeStream(this.config.playerId, this.config.materialIdentifier, sec);\r\n            },\r\n            onPlay: function(sec) {\r\n                _sendGSEvent('playing', sec);\r\n            },\r\n            onPause: function(sec) {\r\n                _sendGSEvent('paused', sec);\r\n            },\r\n            onStop: function(sec) {\r\n                _sendGSEvent('stopped', sec);\r\n            },\r\n            onBuffering: function(sec) {\r\n                _sendGSEvent('buffering', sec);\r\n            },\r\n            onSeekingStarted: function(sec) {\r\n                _sendGSEvent('seekingStarted', sec);\r\n            },\r\n            onComplete: function(sec) {\r\n                _sendGSEvent('complete', sec);\r\n            }\r\n\r\n        };\r\n\r\n    $.extend(gsp.config, gsp.defaultConfig);\r\n\r\n    window.gsp = gsp;\r\n\r\n})(jQuery);"]}